<p>Questo episodio &egrave; tutto sui layout. I layout sono file di viste che definiscono il codice che fa da contorno ad un template. E&rsquo; la cosiddetta cornice applicativa. Possono essere condivisi fra le varie action e i vari controller.</p>
<h3>Layout di applicazione</h3>
<p>Il template qui sotto elenca tutti i progetti.</p>
<pre class="ruby">
&lt;h2&gt;Projects&lt;/h2&gt;
&lt;ul&gt;
&lt;% for project in @projects %&gt;
    &lt;li&gt;&lt;%= project.name %&gt;&lt;/li&gt;
&lt;% end %&gt;
&lt;/ul&gt;
</pre>
<p>Questo codice genera una pagina web piuttosto semplice:</p>
<img src="/system/photos/3/original/E007I01.png" title="Basic page without layout" alt="Basic page without layout" width="800" height="400" />
<p>Se volessimo, aggiungere, per dire, un&rsquo;intestazione, un logo e una barra di navigazione al sito ed avere tutti questi elementi visibili in ogni pagina, allora potremmo sfruttare un layout. I file di layout sono posizionati nella cartella <code>/app/view/layouts</code> di un&rsquo;applicazione Rails. Per definirne uno, basta creare un nuovo file denominato <code>application.rhtml</code><a href="#fn1"><sup>[1]</sup></a> nella cartella dei layout. Ci&ograve; render&agrave; disponibile un layout globale per tutti i controller e tutte le action. Il file di layout applicativo sar&agrave; qualcosa del genere:</p>
<pre class="ruby">
&lt;h1&gt;Application Layout!&lt;/h1&gt;
&lt;%= yield %&gt;
</pre>
<p>La riga significativa del codice sopra &egrave; la seconda. La parola chiave <code>yield</code> indica al layout dove piazzare il contenuto del template che user&agrave; il layout. Ora, se riguardiamo la pagina di prima, possiamo vedere che il layout &egrave; stato applicato.</p>
<img src="/system/photos/4/original/E007I02.png" title="Basic page with layout" alt="Basic page with layout" width="800" height="400" />
<p>Essendo un layout globale, sar&agrave; applicato ad ogni action di ogni controller dell&rsquo;applicazione. Il pi&ugrave; delle volte questo sar&agrave; sufficiente, ma che cosa succederebbe se avessimo bisogno di layout differenti per parti distinte della nostra applicazione?</p>

<h3>Layout speficici del controller</h3>
<p>Un layout pu&ograve; essere reso specifico di un solo controller, semplicemente nominandolo, anzich&egrave; <code>application.rhtml</code>, con lo stesso nome del controller di riferimento (pi&ugrave;, ovviamente, l&rsquo;estensione <code>.rhtml</code>). Cos&igrave;, per creare un layout che sar&agrave; usato da tutte le action del controller dei <code>Projects</code>, creeremo un file nella cartella <code>layouts</code>, denominato <code>projects.rhtml</code><a href="#fn2"><sup>[2]</sup></a>. Ci&ograve; per Rails significa che il layout andr&agrave; applicato solo per le action del controller dei progetti.</p>
<pre class="ruby">
&lt;h1&gt;Project Layout!&lt;/h1&gt;
&lt;%= yield %&gt;
</pre>
<img src="/system/photos/5/original/E007I03.png" title="Basic page with controller-specific layout" alt="Basic page with controller-specific layout" width="800" height="400" />
<p>E se ora volessimo condividere un layout fra diversi controller, non solamente uno, perch&egrave; ad esempio vogliamo un layout per amministratori dell&rsquo;applicazione? Rails ci permette di utilizzare il comando <code>layout</code> per definire il nome del layout che deve essere utilizzato con un controller.</p>
<pre class="ruby">
class ProjectsController &lt; ApplicationController
  layout "admin" 

  def index
    @projects = Project.find(:all)
  end
end
</pre>
<p class="title">Un layout indicato con il comando <code>layout</code> ha la precedenza rispetto a qualsiasi layout specifico del controller o applicativo.</p>

<h3>Layout dinamici</h3>
<p>I layout possono anche essere usati dinamicamente. Per esempio, vorremmo poter applicare il layout <code>admin</code> solo quando un utente &egrave; autenticato nella nostra applicazione. Ci&ograve; pu&ograve; essere fatto passando un simbolo, piuttosto che un valore costante, al comando <code>layout</code> e creando un metodo, con lo stesso nome del simbolo, che calcola quale layout deve essere utilizzato.</p>
<pre class="ruby">
class ProjectsController &lt; ApplicationController
  layout :user_layout

  def index
    @projects = Project.find(:all)
  end

  protected
  def user_layout
    if current_user.admin?
      "admin" 
    else
      "application" 
    end
  end
end    
</pre>
<p>Possiamo perfino restingere il layout ad una singola action di un controller con il comando <code>render</code>.</p>
<pre class="ruby">
def index
  @projects = Project.find(:all)
  render :layout =&gt; 'projects'
end
</pre>
<p>Il layout imposto mediante il comando <code>render</code> avr&agrave; la precedenza su ogni altro layout specifico del controller. To render an action with no layout we can use</p>
<pre class="ruby">render :layout =&gt; false</pre>

<h3>Note</h3>
<ol class="footnotes">
  <li id="fn1">A partire da Rails 2 il file dovrebbe chiamarsi <code>application.html.erb</code></li>
  <li id="fn2">Di nuovo, da Rails 2 in avanti l&rsquo;estensione dovrebbe essere <code>.html.erb</code> piuttosto che <code>.rhtml</code>.</li>
</ol>
