<p>L&rsquo; <a href="/11-refactoring-user-name-part-2">l&rsquo;ultimo episodio</a> e <a href="/episodes/10-refactoring-user-name-part-1">il penultimo</a> si sono focalizzati sul refactoring e il test. Nell&rsquo;ultimo episodio abbiamo rivisto il codice del nostro modello, ma i test su quest&rsquo;ultimo erano rimasti un po&rsquo; imperfetti. Vediamo cosa possiamo fare per sistemarli.</p>
<pre class="ruby">
  require 'test_helper'
  class UserTest &lt; ActiveSupport::TestCase
    test "full name without middle initial" do
      user = User.new(:first_name =&gt; "John", :last_name =&gt; "Smith")
      assert_equal 'John Smith', user.full_name
    end

    test "full name with middle initial" do
      user = User.new(:first_name =&gt; "Paul", :middle_initial =&gt; "P", :last_name =&gt; "Hughes")
      assert_equal 'Paul P. Hughes', user.full_name
    end

    test "full name with empty middle initial" do
      user = User.new(:first_name =&gt; "John", :middle_initial =&gt; "", :last_name =&gt; "Jones")
      assert_equal 'John Jones', user.full_name
    end
  end
</pre>
<p class="title">I test per la classe <code>User</code>.</p>
<p>Abbiamo tre test e un sacco di duplicazioni fra di loro. Per ogni test creiamo un nuovo <code>User</code> e lo confrontiamo con una stringa. Per rimuovere questa duplicazione creeremo un metodo che crea un nuovo <code>User</code> e restituisce il suo <code>full_name</code>.</p>
<pre class="ruby">
def full_name(first, middle, last)
  User.new(:first_name =&gt; first, :middle_initial =&gt; middle, :last_name =&gt; last).full_name
end
</pre>
<p class="title">Il nuovo metodo (non di test) della classe <code>UserTest</code>.</p>
<p>Ora, ognuno dei nostri test pu&ograve; sfruttare questo codice comune ed essere semplificato in modo tale da apparire cos&igrave;:</p>
<pre class="ruby">
test "full name without middle initial" do
  assert_equal "John Smith", full_name('John', nil, 'Smith')
end

test "full name with middle initial" do
  assert_equal 'Paul P. Hughes', full_name('Paul', 'P', 'Hughes')
end  

test "full name with empty middle initial" do
  assert_equal "John Jones", full_name('John', '', 'Jones')
end
</pre>
<p class="title">Il test semplificato per uno <code>User</code> con iniziale di secondo nome.</p>
<p>Al solito, la prova che il nostro refactoring &egrave; corretto, &egrave; che i test hanno tutti ancora successo.</p>
<pre class="terminal">
Laa-Laa:ep11 eifion$ autotest
loading autotest/rails
/opt/local/bin/ruby -I.:lib:test -rtest/unit -e "%w[test/unit/user_test.rb test/functional/users_controller_test.rb].each { |f| require f }" | unit_diff -u
Loaded suite -e
Started
...
Finished in 0.282538 seconds.

3 tests, 3 assertions, 0 failures, 0 errors
</pre>
<p class="title">I test rivisti hanno ancora successo.</p>
<p>Ora che i nostri test sono a posto, possono essere spostati in un singolo metodo con tre assertion. L&rsquo;unico problema nel fare ci&ograve;, &egrave; che se una di queste assertion fallisce, diventa difficile sapere quale. Possiamo per&ograve; aggiungere un messaggio ad ogni assertion proprio per ovviare a questo inconveniente, in modo tale che ogni controllo sia ben indentificabile quando fallisce. La nostra classe di test finale appare cos&igrave;:</p>
<pre class="ruby">
require 'test_helper'

class UserTest &lt; ActiveSupport::TestCase
  test "full name" do
    assert_equal "John Smith", full_name('John', nil, 'Smith'), 'nil middle initial'
    assert_equal 'Paul P. Hughes', full_name('Paul', 'P', 'Hughes'), 'P middle initial'
    assert_equal "John Jones", full_name('John', '', 'Jones'), 'blank middle initial'
  end

  def full_name(first, middle, last)
    User.new(:first_name =&gt; first, :middle_initial =&gt; middle, :last_name =&gt; last).full_name
  end
end
</pre>
p(title). La classe finale <code>UserTest</code> dopo la revisione.
<p>Negli ultimi tre episodi abbiamo creato test unitari e li abbiamo migliorati, insieme al codice che questi andavano a testare, per lasciare entrambi nella forma pi&ugrave; leggibile e mautenibile possibile. While this is a relatively simple example it should persuade you of the benefits of testing and refactoring your Ruby and Rails code.</p>
