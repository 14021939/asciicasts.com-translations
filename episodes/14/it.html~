<p>ActiveRecord fornisce svariati metodi per eseguire calcoli sui modelli (note anche come funzioni di aggregazione, in SQL). Per dimostrare questo, useremo un modello <code>Task</code> cha ha un campo intero chiamato <code>priority</code> e guardiamo alcuni di questi metodi in una <code>script/console</code>. Per ogni metodo, l&rsquo;SQL generato da Rails &egrave; mostrato subito dopo.</p>
<p>Possiamo recuperare al priority del primo task cos√¨:</p>
<code class="terminal">
&gt;&gt; Task.first.priority
=&gt; 3
</code>
<code class="sql"> SELECT * FROM "tasks" LIMIT 1</code>

<p>E se volessimo la somma delle priority di tutti i task?</p>
<code class="terminal">
&gt;&gt; Task.sum(:priority)
=&gt; 12
</code>
<code class="sql">SELECT sum("tasks".priority) AS sum_priority FROM "tasks"</code>

<p>Possiamo persino passare delle condizioni:</p>
<code class="terminal">
&gt;&gt; Task.sum(:priority, :conditions =&gt; {:completed =&gt; false })
=&gt; 2
</code>
<code class="sql">SELECT sum("tasks".priority) AS sum_priority FROM "tasks" WHERE (completed="f")</code>

<p>Cos&igrave; come il metodo <code>sum</code>, ce ne sono altri, come <code>minimum</code>, <code>maximum</code> e <code>average</code>:</p>
<code class="terminal">
&gt;&gt; Task.minimum(:priority)
=&gt; 2
</code>
<code class="sql">SELECT min("tasks".priority) AS min_priority FROM "tasks"</code>

<code class="terminal">
&gt;&gt; Task.maximum(:priority)
=&gt; 5
</code>
<code class="sql">SELECT max("tasks".priority) AS max_priority FROM "tasks"</code>

<code class="terminal">
&gt;&gt; Task.average(:priority).to_f
=&gt; 3.0
</code>
<code class="sql">SELECT avg("tasks".priority) AS avg_priority FROM "tasks"</code>

<p>L&rsquo;SQL generato da Rails quando si usano questi metodi &egrave; usato per rendere pi&ugrave; efficiente il calcolo rispetto all&rsquo;equivalente eseguito tramite oggetti Ruby.</p>

<h3>Utilizzo dei metodi sulle associazioni.</h3>
<p>Trattandosi di metodi di classe, possono essere usati anche attraverso le associazioni. Se abbiamo un modello di <code>Project</code>, che <code>has_many :tasks</code>, possiamo accedere a questi metodi per i task di uno specifico progetto. Si noti che, come prima, possiamo passare condizioni alla <code>find</code>.</p>
<code class="terminal">
  &gt;&gt; project = Project.first
  =&gt; #&lt;Project id: 1, title: "A Project"&gt;
  &gt;&gt; project.tasks.sum(:priority, :conditions =&gt; {:completed =&gt; true})
  =&gt; 10
</code>

<p>Questo esegue il codice SQL riportato qui sotto:</p>
<code class="sql">SELECT sum("tasks".priority) AS sum_priority FROM "tasks" WHERE ("tasks"."completed" = 't') AND ("tasks".project_id = 1)</code>
