<p>Questo episodio affronta le condizioni del metodo <code>find</code>. Di sotto sono riportate alcune linee dalla <code>script/console</code>, che mostrano l&rsquo; SQL che &egrave; prodotto da questi comandi.</p>
<code class="terminal">Task.find(:all, :conditions =&gt; ["completed = ? AND priority = ?", false, 2])</code>
<code class="sql">SELECT * FROM "tasks" WHERE (completed = 'f' AND priority = 2)</code>
<p class="title">Trova tutti i task incompleti che hanno prorit&agrave; pari a 2.</p>

<p>L&rsquo;esempio di sopra funziona, ma come faremmo a recuperare tutti i <code>Tasks</code> che hanno una <code>priority</code> che vale <code>nil</code>?
<code class="terminal">Task.find(:all, :conditions =&gt; ["completed = ? AND priority = ?", false, nil])</code>
<code class="sql">SELECT * FROM "tasks" WHERE (completed = 'f' AND priority = NULL) </code>
<p class="title">La ricerca per valori null produce <span class="caps">SQL</span> scorretto.</p>

<p>L&rsquo;SQL prodotto sopra non &egrave; corretto. Per recuperare valori null, la corretta sintassi sarebbe infatti <code>priority IS NULL</code>, non <code>priority = NULL</code>. Analogamente, se volessimo recuperare i record passando pi&ugrave; di un valore per il campo priority, usando un array o un range, dovremmo cambiare lo statement di find per usare correttamente <code>IN</code> al posto di <code>=</code>, e mettere le parentesi a contorno del secondo punto di domanda, al fine di garantire che l&rsquo;SQL prodotto sia sintatticamente corretto.</p>
<code class="terminal">Task.find(:all, :conditions =&gt; ["completed = ? AND priority IN (?)", false, [1,3]])</code>
<code class="sql">SELECT * FROM "tasks" WHERE (completed = 'f' AND priority IN (1,3))</code>
<p class="title"></p>

<p>A partire da Rails 1.2, c&rsquo;&egrave; un modo miglior per passare le condizioni: mediante un hash. Usare un hash di condizioni garantisce che Rails adotti le condizioni appropriate quando esegue le query sul database.</p>
<code class="terminal">Task.find(:all, :conditions =&gt; { :completed =&gt; false, :priority =&gt; [1,3] }</code>
<code class="sql">SELECT * FROM "tasks" WHERE (completed = 'f' AND priority IN (1,3)</code>
<p class="title">Uso di un hash di condizioni con un parametro array.</p>

<code class="terminal">Task.find(:all, :conditions =&gt; {:completed =&gt; false, :priority =&gt; 2..4})</code><code class="sql">SELECT * FROM "tasks" WHERE ("tasks"."priority" BETWEEN 2 AND 4 AND "tasks"."completed" = 'f') </code>
<p class="title">Se si passa un range, questo viene tradotto con la clausola <code>BETWEEN</code> nell&rsquo;<span class="caps">SQL</span>.</p>

<h3>Utilizzo con find dinamiche</h3>
<p>Nell&rsquo;<a href="/episodes/2-dynamic-find-by-methods">episodio 2</a> abbiamo usato metodi <code>find_by</code> dinamici. Anche questi possono accettare valori nil, array o range come argomenti.</p>
<code class="terminal">Task.find_by_priority(1..5)</code><code class="sql">SELECT * FROM "tasks" WHERE ("tasks"."priority" BETWEEN 1 AND 5) LIMIT 1</code>

<p>L&rsquo;utilizzo di hash nelle condizioni di find ensures that Rails generates the correct <span class="caps">SQL</span> when passing any type of parameter to the find.</p>
